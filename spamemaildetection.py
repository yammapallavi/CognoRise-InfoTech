# -*- coding: utf-8 -*-
"""SPAMEMAILDETECTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1laVXM5D77vaH6S5gG9-dVacCOsMDzAT6
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
import missingno as msno
from wordcloud import WordCloud

df = pd.read_csv('/content/spam.csv')

df.head()

df.tail()

df.info()

df.describe()

df.shape

df.columns

df.isnull().sum()

msno.bar(df)

df.dtypes

sns.heatmap(df.isnull())
plt.show()

df.head()

df.columns = ['Category' , 'Message']
label_encoder = LabelEncoder()
df['Category'] = label_encoder.fit_transform(df['Category'])
x = df['Category']
y = df['Message']

print(x)
print(y)

plt.figure(figsize=(6, 4))
sns.countplot(x='Category', data=df)
plt.title('Distribution of Spam and Ham Emails')
plt.xlabel('Category (0 = Ham, 1 = Spam)')
plt.ylabel('count')
plt.show()

fig = plt.figure(figsize=(10, 5))
plt.pie(df['Category'].value_counts(), labels=['Ham', 'Spam'], autopct='%0.2f%%')
plt.title('Distribution of Spam and Ham Emails')
plt.show()

ham_words = ' '.join(list(df[df['Category'] == 0]['Message']))
ham_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(ham_words)
plt.figure(figsize=(10, 6))
plt.imshow(ham_wordcloud,interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud for Ham Emails')
plt.show()

spam_words = ' '.join(list(df[df['Category'] == 1]['Message']))
spam_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(spam_words)
plt.figure(figsize=(10, 6))
plt.imshow(spam_wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud for Spam Emails')
plt.show()

y = df['Category']
x = df['Message']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(stop_words='english')
x_train_tfidf = vectorizer.fit_transform(x_train)
x_test_tfidf = vectorizer.transform(x_test)

from sklearn.feature_extraction.text import TfidfVectorizer
x_train = x_train.astype(str)
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
x_train_features = feature_extraction.fit_transform(x_train)
x_test_features = feature_extraction.transform(x_test)

from sklearn.metrics import classification_report, accuracy_score

def train_and_evaluate(model, x_train, x_test, y_train, y_test):
    model.fit(x_train,y_train)
    y_pred = model.predict(x_test)
    print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
    print(classification_report(y_test, y_pred))

models = {
    'Logistic Regression': LogisticRegression(),
    'Random Forest': RandomForestClassifier(),
    'AdaBoost' : AdaBoostClassifier(),
    'KNN' : KNeighborsClassifier()
    }

lr_model = LogisticRegression()
lr_model.fit(x_train_features, y_train)
print("Logistic Regression Results:")
train_and_evaluate(lr_model, x_train_tfidf, x_test_tfidf, y_train, y_test)

prediction = lr_model.predict(x_train_features)
accuracy = accuracy_score(y_train, prediction)
accuracy

prediction = lr_model.predict(x_test_features)
accuracy = accuracy_score(y_test, prediction)
accuracy

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier()
rf_model.fit(x_train_features, y_train)
print("Random Forest Classifier Results:")
train_and_evaluate(rf_model, x_train_tfidf, x_test_tfidf, y_train, y_test)

prediction = rf_model.predict(x_train_features)
accuracy = accuracy_score(y_train, prediction)
accuracy

prediction = rf_model.predict(x_test_features)
accuracy = accuracy_score(y_test, prediction)
accuracy

from sklearn.ensemble import AdaBoostClassifier
ad_model = AdaBoostClassifier()
ad_model.fit(x_train_features, y_train)
print("AdaBoost Classifier Results:")
train_and_evaluate(ad_model, x_train_tfidf, x_test_tfidf, y_train, y_test)

prediction = ad_model.predict(x_train_features)
accuracy = accuracy_score(y_train, prediction)
accuracy

prediction = ad_model.predict(x_test_features)
accuracy = accuracy_score(y_test, prediction)
accuracy

from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(x_train_features, y_train)
print("K-Nearest Neighbors Results:")
train_and_evaluate(knn_model, x_train_tfidf, x_test_tfidf, y_train, y_test)

prediction = knn_model.predict(x_train_features)
accuracy = accuracy_score(y_train, prediction)
accuracy

prediction = knn_model.predict(x_test_features)
accuracy = accuracy_score(y_test, prediction)
accuracy

def prediction(model, vectorizer, messages):
    messages_tfidf = vectorizer.transform(messages)
    predictions = model.predict(messages_tfidf)
    labels = label_encoder.inverse_transform(predictions)
    return labels

demo_email = ["Home so we can always chat"]
features = feature_extraction.transform(demo_email)
prediction = lr_model.predict(features)
print(prediction)
if(prediction[0] == 1):
   print("This is an ham email")
else:
   print("This is a spam email")

demo_email = ["Hi team, I've attached the updated project proposal for your review.Let me know if you have any feedback."]
prediction = ad_model.predict(features)
print(prediction)
if(prediction[0] == 1):
   print("This is a ham email")
else:
  print("This is a spam email")