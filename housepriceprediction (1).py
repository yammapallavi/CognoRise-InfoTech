# -*- coding: utf-8 -*-
"""HOUSEPRICEPREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z9l6CUDfhg0RNDUkWchPpI9K-u9QzTCM
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

data=pd.read_csv('/content/output.csv')

data

data.head()

data.tail()

data.info()

data.describe()

data.isnull().sum()

data.shape

data.columns.tolist()

data.drop('date',inplace=True , axis=1)

from matplotlib import pyplot as plt
data['bedrooms'].plot(kind='hist',bins=20, title='bedrooms')
plt.gca().spines[['top','right',]].set_visible(True)

data.dropna()

data['city'].value_counts()

data['country'].value_counts()

data['street'].value_counts()

data['statezip'].value_counts()

X= data.drop(['price','street','city','statezip','country'], axis=1)
Y= data['price']

x_train,x_test,y_train,y_test = train_test_split(X,Y, test_size=0.2, random_state=42)

x_train

y_train

train_data = x_train.join(y_train)

train_data

train_data.hist(figsize=(15,10))

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15,8))
sns.heatmap(train_data.corr(), annot=True, cmap='YlGnBu')

train_data['sqft_living'] = np.sqrt(train_data['sqft_living']+1)
train_data['sqft_basement'] = np.sqrt(train_data['sqft_basement']+1)
train_data['sqft_above'] = np.sqrt(train_data['sqft_above']+1)
train_data['waterfront'] = np.sqrt(train_data['waterfront']+1)

train_data.hist(figsize=(15,10))

plt.figure(figsize=(15,8))
sns.scatterplot(x='sqft_living',y='sqft_basement',palette = 'coolwarm', data=train_data)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train,y_train = train_data.drop('price',axis=1),train_data['price']
x_train_s = scaler.fit_transform(x_train)

model1 = LinearRegression()
model1.fit(x_train,y_train)

test_data = x_test.join(y_test)

test_data['sqft_living'] = np.log(test_data['sqft_living'] + 1)
test_data['sqft_basement'] = np.log(test_data['sqft_basement']+1)
test_data['sqft_above'] = np.log(test_data['sqft_above']+1)
test_data['waterfront'] = np.log(test_data['waterfront']+1)

x_test,y_test = test_data.drop('price', axis=1),test_data['price']

test_data

x_test_s = scaler.transform(x_test)

model1.score(x_test_s, y_test)

y_pred1 = model1.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_absolute_percentage_error

mse = mean_squared_error(y_test, y_pred1)
mae = mean_absolute_error(y_test, y_pred1)
mape = mean_absolute_percentage_error(y_test, y_pred1)
r2 = r2_score(y_test, y_pred1)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute error: {mae}')
print(f'Mean absolute percentage error: {mape}')
print(f'R-squared: {r2}')

model2 = DecisionTreeRegressor()
model2.fit(x_train_s, y_train)

model2.score(x_test_s,y_test)

y_pred2 = model2.predict(x_test)

mse = mean_squared_error(y_test, y_pred2)
mae = mean_squared_error(y_test, y_pred2)
mape = mean_absolute_percentage_error(y_test, y_pred2)
r2 = r2_score(y_test, y_pred2)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute error: {mae}')
print(f'Mean absolute percentage error: {mape}')
print(f'R-squared: {r2}')

model3 = RandomForestRegressor()
model3.fit(x_train_s, y_train)

model3.score(x_test_s,y_test)

y_pred3 = model3.predict(x_test)

mse = mean_squared_error(y_test, y_pred3)
mae = mean_absolute_error(y_test, y_pred3)
mape = mean_absolute_percentage_error(y_test, y_pred3)
r2 = r2_score(y_test, y_pred3)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute error: {mae}')
print(f'Mean absolute percentage error: {mape}')
print(f'R-squared: {r2}')

model4 = GradientBoostingRegressor()
model4.fit(x_train, y_train)

model4.score(x_test,y_test)

y_pred4 = model4.predict(x_test)

mse = mean_squared_error(y_test, y_pred4)
mae = mean_absolute_error(y_test, y_pred4)
mape = mean_absolute_percentage_error(y_test, y_pred4)
r2 = r2_score(y_test, y_pred4)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute error: {mae}')
print(f'Mean absolute percentage error: {mape}')
print(f'R-squared: {r2}')

plt.scatter (y_test, y_pred4)
plt.xlabel("Actual Prices")
plt.ylabel("predicted prices")
plt.title("Actual prices vs Predicted prices")
plt.show()

